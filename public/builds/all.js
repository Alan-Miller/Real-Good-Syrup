'use strict';

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

'use strict';

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

'use strict';

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/landing', templateUrl: './views/landing.html', controller: 'landingControl' }).state('about', { parent: 'landing', url: '/about', templateUrl: './views/about.html', controller: 'aboutControl' }).state('cart', { parent: 'landing', url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl' }).state('login', { parent: 'landing', url: '/login', templateUrl: './views/login.html', controller: 'loginControl' }).state('process', { parent: 'landing', url: '/process', templateUrl: './views/process.html', controller: 'processControl' }).state('products', { parent: 'landing', url: '/products', templateUrl: './views/products.html', controller: 'productsControl' }).state('contact', { //  parent: 'landing',
    url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', { url: '/', templateUrl: './views/landing.html', controller: 'landingControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('admin', { url: '/admin', templateUrl: './views/admin.html', controller: 'adminControl', views: { 'first': { controller: 'adminControl', templateUrl: 'views/admin.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('patron', { url: '/patron', templateUrl: './views/patron.html', controller: 'patronControl', views: { 'first': { controller: 'patronControl', templateUrl: 'views/patron.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('about', { url: '/about', templateUrl: './views/about.html', controller: 'aboutControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'aboutControl', templateUrl: 'views/about.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('cart', { url: '/cart', templateUrl: './views/cart.html', controller: 'cartControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'cartControl', templateUrl: 'views/cart.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('login', { url: '/login', templateUrl: './views/login.html', controller: 'loginControl', views: { 'first': { controller: 'loginControl', templateUrl: 'views/login.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('process', { url: '/process', templateUrl: './views/process.html', controller: 'processControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('products', { url: '/products', templateUrl: './views/products.html', controller: 'productsControl', views: { 'first': { controller: 'landingControl', templateUrl: 'views/landing.html' }, 'second': { controller: 'productsControl', templateUrl: 'views/products.html' }, 'third': { controller: 'processControl', templateUrl: 'views/process.html' }, 'fourth': { controller: 'contactControl', templateUrl: 'views/contact.html' } } }).state('contact', { url: '/contact', templateUrl: './views/contact.html', controller: 'contactControl' });$urlRouterProvider.otherwise('/');
});$(document).ready(function () {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
  Nav scrolls to top and sticks
  When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
  If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var nav = $('#main-nav');var navOffset = nav.offset().top;$(window).resize(function () {
    navOffset = nav.offset().top;
  });$(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');nav.removeClass('scroll-nav');$('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');nav.removeClass('fixed-nav');$('#nav-buffer').css('display', 'none');
    }
  }); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      SCROLL TO STATE
      Click nav options to scroll to position of state
      setTimout function waits till state change before scrolling
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      } else {
        $('html, body').animate({ scrollTop: $(this).offset().top - 70 }, 1000);
      }
    });
  };$('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });$('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });$('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });$('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });$(window).scroll(function () {
    var winScroll = $(this).scrollTop();$('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });$('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });$('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' }); // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });$('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  }); // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});angular.module('syrupApp').controller('aboutControl', function ($scope) {});angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {
  rgsService.getUsers().then(function (response) {
    $scope.users = response;response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });console.log(response);
  });$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
}); /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    Code Graveyard ††
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }
angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response;console.log(response);
  });
});angular.module('syrupApp').controller('contactControl', function ($scope) {});angular.module('syrupApp').controller('landingControl', function ($scope) {});angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
  Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({ username: username, password: password }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin'); // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';console.log('Can\'t log in');
      }
    });
  } // getUser();
});angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {
  $scope.user = rgsService.user;$scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  }; // FIN
});angular.module('syrupApp').controller('processControl', function ($scope) {});angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {
  rgsService.getProducts().then(function (response) {
    $scope.products = response; // console.log(response);
  });
});angular.module('syrupApp').service('rgsService', function ($http, $state) {
  var port = 8002;this.getProducts = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/products' }).then(function (response) {
      return response.data;
    });
  };this.getUsers = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' }).then(function (response) {
      return response.data;
    });
  };this.getThisUser = function (id) {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/api/users' + id }).then(function (response) {
      return response.data;
    });
  };this.confirmLogout = function (res) {
    if (res) {
      swal({ title: 'Are you sure?', text: "This will log you out.", type: 'question', showCancelButton: true, cancelButtonColor: 'RGB(217, 67, 98)', confirmButtonColor: 'RGB(153, 196, 210)', confirmButtonText: 'Yes, log out!' }).then(function () {
        swal({ title: 'Bye! Thanks for visiting!', // text: 'We\'ll miss you.',
          type: 'success', timer: 1100 });$state.go('landing');
      });
    }
  }; /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     AUTH
     Auth functions
     Mostly pasted in from Brett's code, with Josh's tweaks
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */this.loginLocal = function (credentials) {
    return $http({ method: "POST", url: 'http://localhost:' + port + '/auth/local', data: credentials }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };this.getUser = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/me' }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };this.logout = function () {
    return $http({ method: 'GET', url: 'http://localhost:' + port + '/auth/logout' }).then(function (res) {
      return res.data;
    });
  }; // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});
angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 3000;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 3000;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 3000;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 3000;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });
});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();
});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});
angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/landing',
    templateUrl: './views/landing.html',
    controller: 'landingControl'
  }).state('about', {
    parent: 'landing',
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl'
  }).state('cart', {
    parent: 'landing',
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl'
  }).state('login', {
    parent: 'landing',
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl'
  }).state('process', {
    parent: 'landing',
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl'
  }).state('products', {
    parent: 'landing',
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl'
  }).state('contact', {
    //  parent: 'landing',
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

angular.module('syrupApp', ['ui.router']).config(function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state('landing', {
    url: '/',
    templateUrl: './views/landing.html',
    controller: 'landingControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('admin', {
    url: '/admin',
    templateUrl: './views/admin.html',
    controller: 'adminControl',
    views: {
      'first': {
        controller: 'adminControl',
        templateUrl: 'views/admin.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('patron', {
    url: '/patron',
    templateUrl: './views/patron.html',
    controller: 'patronControl',
    views: {
      'first': {
        controller: 'patronControl',
        templateUrl: 'views/patron.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('about', {
    url: '/about',
    templateUrl: './views/about.html',
    controller: 'aboutControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'aboutControl',
        templateUrl: 'views/about.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('cart', {
    url: '/cart',
    templateUrl: './views/cart.html',
    controller: 'cartControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'cartControl',
        templateUrl: 'views/cart.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('login', {
    url: '/login',
    templateUrl: './views/login.html',
    controller: 'loginControl',
    views: {
      'first': {
        controller: 'loginControl',
        templateUrl: 'views/login.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('process', {
    url: '/process',
    templateUrl: './views/process.html',
    controller: 'processControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('products', {
    url: '/products',
    templateUrl: './views/products.html',
    controller: 'productsControl',
    views: {
      'first': {
        controller: 'landingControl',
        templateUrl: 'views/landing.html'
      },
      'second': {
        controller: 'productsControl',
        templateUrl: 'views/products.html'
      },
      'third': {
        controller: 'processControl',
        templateUrl: 'views/process.html'
      },
      'fourth': {
        controller: 'contactControl',
        templateUrl: 'views/contact.html'
      }
    }
  }).state('contact', {
    url: '/contact',
    templateUrl: './views/contact.html',
    controller: 'contactControl'
  });

  $urlRouterProvider.otherwise('/');
});

$(document).ready(function () {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  STICKY NAV
    Nav scrolls to top and sticks
    When nav sticks and leaves flow, #nav-buffer is displayed to fill the gap
    If window is resized, navOffset is reevaluated
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  var nav = $('#main-nav');
  var navOffset = nav.offset().top;

  $(window).resize(function () {
    navOffset = nav.offset().top;
  });

  $(window).on('scroll', function () {
    if ($(window).scrollTop() >= navOffset) {
      nav.addClass('fixed-nav');
      nav.removeClass('scroll-nav');
      $('#nav-buffer').css('display', 'block');
    } else {
      nav.addClass('scroll-nav');
      nav.removeClass('fixed-nav');
      $('#nav-buffer').css('display', 'none');
    }
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SCROLL TO STATE
    Click nav options to scroll to position of state
    setTimout function waits till state change before scrolling
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  $.fn.scrollToStateContainer = function () {
    return this.each(function () {
      if ($(window).scrollTop() < navOffset) {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      } else {
        $('html, body').animate({
          scrollTop: $(this).offset().top - 70
        }, 1000);
      }
    });
  };
  $('.small-logo, .login-nav').on('click', function () {
    window.setTimeout(function () {
      $('#first').scrollToStateContainer();
    });
  });
  $('.products-nav, .cart-nav').on('click', function () {
    window.setTimeout(function () {
      $('#second').scrollToStateContainer();
    });
  });
  $('.process-nav, .about-nav').on('click', function () {
    window.setTimeout(function () {
      $('#third').scrollToStateContainer();
    });
  });
  $('.contact-nav').on('click', function () {
    window.setTimeout(function () {
      $('#fourth').scrollToStateContainer();
    });
  });

  $(window).scroll(function () {
    var winScroll = $(this).scrollTop();
    $('.splash-logo').css({ 'transform': 'translate(0px, ' + winScroll * 0.7 + '%)' });
    $('.layer1').css({ 'transform': 'translate(0px, ' + (winScroll - 2500) / 24 + '%)' });
    $('.layer4').css({ 'transform': 'translate(0px, ' + (winScroll - 2200) / 20 + '%)' });
    // $('.layer1').css({'transform' :'translate(0px, ' + winScroll / 80 + '%)'});
    $('.layer2').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
    $('.layer3').css({ 'transform': 'translate(0px, ' + (winScroll - 2250) / 30 + '%)' });
  });

  // $(window).scroll(function() {
  //   var winScroll = $(this).scrollTop();
  //   $('.vader').css({'transform': 'rotate(-' + winScroll / 40 + 'deg)'});
  //   $('.left-branch').css({'transform': 'translate(-' + winScroll / 80 + '%, 0px)'});
  //   $('.right-branch').css({'transform' :'translate(' + winScroll / 80 + '%, 0px)'});
  // });

});

angular.module('syrupApp').controller('aboutControl', function ($scope) {});

angular.module('syrupApp').controller('adminControl', function ($scope, rgsService, $state) {

  rgsService.getUsers().then(function (response) {
    $scope.users = response;
    response.forEach(function (eachUser) {
      if (eachUser.admin) {
        eachUser.admin = 'admin';
      } else eachUser.admin = 'not an admin';
    });
    console.log(response);
  });

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Code Graveyard ††
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// if (res) {
//   swal({
//     title: 'Are you sure?',
//     text: "This will log you out.",
//     type: 'question',
//     showCancelButton: true,
//     cancelButtonColor: 'RGB(217, 67, 98)',
//     confirmButtonColor: 'RGB(153, 196, 210)',
//     confirmButtonText: 'Yes, log out!'
//   }).then(function() {
//     swal({
//       title: 'Bye! Thanks for visiting!',
//       // text: 'We\'ll miss you.',
//       type: 'success',
//       timer: 1300
//       }
//     );
//     $state.go('landing');
//   });
// }

angular.module('syrupApp').controller('cartControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    console.log(response);
  });
});

angular.module('syrupApp').controller('contactControl', function ($scope) {});

angular.module('syrupApp').controller('landingControl', function ($scope) {});

angular.module('syrupApp').controller('loginControl', function ($scope, rgsService, $state) {

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  $scope.loginLocal = function (username, password) {
    // $scope.username = username;
    rgsService.loginLocal({
      username: username,
      password: password
    }).then(function (user) {
      // Here, response is the user sent from /auth/local endpoint
      rgsService.user = user;
      checkUser(user.admin); // Passes admin status into checkUser fn below
    });
  };

  function checkUser(isAdmin) {
    rgsService.getUser().then(function (user) {
      // console.log('Here is something: ' + $scope.admin);
      if (user && isAdmin) {
        $state.go('admin');
        // console.log($scope.username[0].toUpperCase() + $scope.username.slice(1).toLowerCase() + ' is logged in');
      } else if (user) {
        $state.go('patron');
      } else {
        $scope.loginHeading = 'Wrong name or password. Try again.';
        console.log('Can\'t log in');
      }
    });
  }
  // getUser();

});

angular.module('syrupApp').controller('patronControl', function ($scope, rgsService, $state) {

  $scope.user = rgsService.user;

  $scope.logout = function () {
    rgsService.logout().then(function (res) {
      rgsService.confirmLogout(res);
    });
  };

  // FIN
});

angular.module('syrupApp').controller('processControl', function ($scope) {});

angular.module('syrupApp').controller('productsControl', function ($scope, rgsService) {

  rgsService.getProducts().then(function (response) {
    $scope.products = response;
    // console.log(response);
  });
});

angular.module('syrupApp').service('rgsService', function ($http, $state) {

  var port = 8002;

  this.getProducts = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/products'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getUsers = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users'
    }).then(function (response) {
      return response.data;
    });
  };

  this.getThisUser = function (id) {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/api/users' + id
    }).then(function (response) {
      return response.data;
    });
  };

  this.confirmLogout = function (res) {
    if (res) {
      swal({
        title: 'Are you sure?',
        text: "This will log you out.",
        type: 'question',
        showCancelButton: true,
        cancelButtonColor: 'RGB(217, 67, 98)',
        confirmButtonColor: 'RGB(153, 196, 210)',
        confirmButtonText: 'Yes, log out!'
      }).then(function () {
        swal({
          title: 'Bye! Thanks for visiting!',
          // text: 'We\'ll miss you.',
          type: 'success',
          timer: 1100
        });
        $state.go('landing');
      });
    }
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  AUTH
    Auth functions
    Mostly pasted in from Brett's code, with Josh's tweaks
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
  this.loginLocal = function (credentials) {
    return $http({
      method: "POST",
      url: 'http://localhost:' + port + '/auth/local',
      data: credentials
    }).then(function (res) {
      return res.data;
    }).catch(function (err) {
      console.log('service loginLocal function caught error logging in!', err);
    });
  };

  this.getUser = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/me'
    }).then(function (res) {
      // console.log(res);
      return res.data;
    }).catch(function (err) {
      console.log(err);
    });
  };

  this.logout = function () {
    return $http({
      method: 'GET',
      url: 'http://localhost:' + port + '/auth/logout'
    }).then(function (res) {
      return res.data;
    });
  };

  // FIN
});